// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/v1/service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EchoService_EchoUnary_FullMethodName         = "/proto.v1.EchoService/EchoUnary"
	EchoService_EchoServerStream_FullMethodName  = "/proto.v1.EchoService/EchoServerStream"
	EchoService_EchoClientStream_FullMethodName  = "/proto.v1.EchoService/EchoClientStream"
	EchoService_EchoBidirectional_FullMethodName = "/proto.v1.EchoService/EchoBidirectional"
)

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EchoServiceClient interface {
	// Unary
	EchoUnary(ctx context.Context, in *EchoUnaryRequest, opts ...grpc.CallOption) (*EchoUnaryResponse, error)
	// Server streaming
	EchoServerStream(ctx context.Context, in *EchoServerStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EchoServerStreamResponse], error)
	// Client streaming
	EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EchoClientStreamRequest, EchoClientStreamResponse], error)
	// Bidirectional streaming
	EchoBidirectional(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EchoBidirectionalRequest, EchoBidirectionalResponse], error)
}

type echoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEchoServiceClient(cc grpc.ClientConnInterface) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) EchoUnary(ctx context.Context, in *EchoUnaryRequest, opts ...grpc.CallOption) (*EchoUnaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoUnaryResponse)
	err := c.cc.Invoke(ctx, EchoService_EchoUnary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoServerStream(ctx context.Context, in *EchoServerStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EchoServerStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[0], EchoService_EchoServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EchoServerStreamRequest, EchoServerStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoServerStreamClient = grpc.ServerStreamingClient[EchoServerStreamResponse]

func (c *echoServiceClient) EchoClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[EchoClientStreamRequest, EchoClientStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[1], EchoService_EchoClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EchoClientStreamRequest, EchoClientStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoClientStreamClient = grpc.ClientStreamingClient[EchoClientStreamRequest, EchoClientStreamResponse]

func (c *echoServiceClient) EchoBidirectional(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[EchoBidirectionalRequest, EchoBidirectionalResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &EchoService_ServiceDesc.Streams[2], EchoService_EchoBidirectional_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EchoBidirectionalRequest, EchoBidirectionalResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoBidirectionalClient = grpc.BidiStreamingClient[EchoBidirectionalRequest, EchoBidirectionalResponse]

// EchoServiceServer is the server API for EchoService service.
// All implementations must embed UnimplementedEchoServiceServer
// for forward compatibility.
type EchoServiceServer interface {
	// Unary
	EchoUnary(context.Context, *EchoUnaryRequest) (*EchoUnaryResponse, error)
	// Server streaming
	EchoServerStream(*EchoServerStreamRequest, grpc.ServerStreamingServer[EchoServerStreamResponse]) error
	// Client streaming
	EchoClientStream(grpc.ClientStreamingServer[EchoClientStreamRequest, EchoClientStreamResponse]) error
	// Bidirectional streaming
	EchoBidirectional(grpc.BidiStreamingServer[EchoBidirectionalRequest, EchoBidirectionalResponse]) error
	mustEmbedUnimplementedEchoServiceServer()
}

// UnimplementedEchoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEchoServiceServer struct{}

func (UnimplementedEchoServiceServer) EchoUnary(context.Context, *EchoUnaryRequest) (*EchoUnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoUnary not implemented")
}
func (UnimplementedEchoServiceServer) EchoServerStream(*EchoServerStreamRequest, grpc.ServerStreamingServer[EchoServerStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EchoServerStream not implemented")
}
func (UnimplementedEchoServiceServer) EchoClientStream(grpc.ClientStreamingServer[EchoClientStreamRequest, EchoClientStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EchoClientStream not implemented")
}
func (UnimplementedEchoServiceServer) EchoBidirectional(grpc.BidiStreamingServer[EchoBidirectionalRequest, EchoBidirectionalResponse]) error {
	return status.Errorf(codes.Unimplemented, "method EchoBidirectional not implemented")
}
func (UnimplementedEchoServiceServer) mustEmbedUnimplementedEchoServiceServer() {}
func (UnimplementedEchoServiceServer) testEmbeddedByValue()                     {}

// UnsafeEchoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EchoServiceServer will
// result in compilation errors.
type UnsafeEchoServiceServer interface {
	mustEmbedUnimplementedEchoServiceServer()
}

func RegisterEchoServiceServer(s grpc.ServiceRegistrar, srv EchoServiceServer) {
	// If the following call pancis, it indicates UnimplementedEchoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EchoService_ServiceDesc, srv)
}

func _EchoService_EchoUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoUnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EchoService_EchoUnary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoUnary(ctx, req.(*EchoUnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServiceServer).EchoServerStream(m, &grpc.GenericServerStream[EchoServerStreamRequest, EchoServerStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoServerStreamServer = grpc.ServerStreamingServer[EchoServerStreamResponse]

func _EchoService_EchoClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).EchoClientStream(&grpc.GenericServerStream[EchoClientStreamRequest, EchoClientStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoClientStreamServer = grpc.ClientStreamingServer[EchoClientStreamRequest, EchoClientStreamResponse]

func _EchoService_EchoBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EchoServiceServer).EchoBidirectional(&grpc.GenericServerStream[EchoBidirectionalRequest, EchoBidirectionalResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type EchoService_EchoBidirectionalServer = grpc.BidiStreamingServer[EchoBidirectionalRequest, EchoBidirectionalResponse]

// EchoService_ServiceDesc is the grpc.ServiceDesc for EchoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EchoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EchoUnary",
			Handler:    _EchoService_EchoUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EchoServerStream",
			Handler:       _EchoService_EchoServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EchoClientStream",
			Handler:       _EchoService_EchoClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "EchoBidirectional",
			Handler:       _EchoService_EchoBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/v1/service.proto",
}
