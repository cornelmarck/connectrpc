// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/cornelmarck/connectrpc/gen/proto/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EchoServiceName is the fully-qualified name of the EchoService service.
	EchoServiceName = "proto.v1.EchoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EchoServiceEchoUnaryProcedure is the fully-qualified name of the EchoService's EchoUnary RPC.
	EchoServiceEchoUnaryProcedure = "/proto.v1.EchoService/EchoUnary"
	// EchoServiceEchoServerStreamProcedure is the fully-qualified name of the EchoService's
	// EchoServerStream RPC.
	EchoServiceEchoServerStreamProcedure = "/proto.v1.EchoService/EchoServerStream"
	// EchoServiceEchoClientStreamProcedure is the fully-qualified name of the EchoService's
	// EchoClientStream RPC.
	EchoServiceEchoClientStreamProcedure = "/proto.v1.EchoService/EchoClientStream"
	// EchoServiceEchoBidirectionalProcedure is the fully-qualified name of the EchoService's
	// EchoBidirectional RPC.
	EchoServiceEchoBidirectionalProcedure = "/proto.v1.EchoService/EchoBidirectional"
)

// EchoServiceClient is a client for the proto.v1.EchoService service.
type EchoServiceClient interface {
	// Unary
	EchoUnary(context.Context, *connect.Request[v1.EchoUnaryRequest]) (*connect.Response[v1.EchoUnaryResponse], error)
	// Server streaming
	EchoServerStream(context.Context, *connect.Request[v1.EchoServerStreamRequest]) (*connect.ServerStreamForClient[v1.EchoServerStreamResponse], error)
	// Client streaming
	EchoClientStream(context.Context) *connect.ClientStreamForClient[v1.EchoClientStreamRequest, v1.EchoClientStreamResponse]
	// Bidirectional streaming
	EchoBidirectional(context.Context) *connect.BidiStreamForClient[v1.EchoBidirectionalRequest, v1.EchoBidirectionalResponse]
}

// NewEchoServiceClient constructs a client for the proto.v1.EchoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEchoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EchoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	echoServiceMethods := v1.File_proto_v1_service_proto.Services().ByName("EchoService").Methods()
	return &echoServiceClient{
		echoUnary: connect.NewClient[v1.EchoUnaryRequest, v1.EchoUnaryResponse](
			httpClient,
			baseURL+EchoServiceEchoUnaryProcedure,
			connect.WithSchema(echoServiceMethods.ByName("EchoUnary")),
			connect.WithClientOptions(opts...),
		),
		echoServerStream: connect.NewClient[v1.EchoServerStreamRequest, v1.EchoServerStreamResponse](
			httpClient,
			baseURL+EchoServiceEchoServerStreamProcedure,
			connect.WithSchema(echoServiceMethods.ByName("EchoServerStream")),
			connect.WithClientOptions(opts...),
		),
		echoClientStream: connect.NewClient[v1.EchoClientStreamRequest, v1.EchoClientStreamResponse](
			httpClient,
			baseURL+EchoServiceEchoClientStreamProcedure,
			connect.WithSchema(echoServiceMethods.ByName("EchoClientStream")),
			connect.WithClientOptions(opts...),
		),
		echoBidirectional: connect.NewClient[v1.EchoBidirectionalRequest, v1.EchoBidirectionalResponse](
			httpClient,
			baseURL+EchoServiceEchoBidirectionalProcedure,
			connect.WithSchema(echoServiceMethods.ByName("EchoBidirectional")),
			connect.WithClientOptions(opts...),
		),
	}
}

// echoServiceClient implements EchoServiceClient.
type echoServiceClient struct {
	echoUnary         *connect.Client[v1.EchoUnaryRequest, v1.EchoUnaryResponse]
	echoServerStream  *connect.Client[v1.EchoServerStreamRequest, v1.EchoServerStreamResponse]
	echoClientStream  *connect.Client[v1.EchoClientStreamRequest, v1.EchoClientStreamResponse]
	echoBidirectional *connect.Client[v1.EchoBidirectionalRequest, v1.EchoBidirectionalResponse]
}

// EchoUnary calls proto.v1.EchoService.EchoUnary.
func (c *echoServiceClient) EchoUnary(ctx context.Context, req *connect.Request[v1.EchoUnaryRequest]) (*connect.Response[v1.EchoUnaryResponse], error) {
	return c.echoUnary.CallUnary(ctx, req)
}

// EchoServerStream calls proto.v1.EchoService.EchoServerStream.
func (c *echoServiceClient) EchoServerStream(ctx context.Context, req *connect.Request[v1.EchoServerStreamRequest]) (*connect.ServerStreamForClient[v1.EchoServerStreamResponse], error) {
	return c.echoServerStream.CallServerStream(ctx, req)
}

// EchoClientStream calls proto.v1.EchoService.EchoClientStream.
func (c *echoServiceClient) EchoClientStream(ctx context.Context) *connect.ClientStreamForClient[v1.EchoClientStreamRequest, v1.EchoClientStreamResponse] {
	return c.echoClientStream.CallClientStream(ctx)
}

// EchoBidirectional calls proto.v1.EchoService.EchoBidirectional.
func (c *echoServiceClient) EchoBidirectional(ctx context.Context) *connect.BidiStreamForClient[v1.EchoBidirectionalRequest, v1.EchoBidirectionalResponse] {
	return c.echoBidirectional.CallBidiStream(ctx)
}

// EchoServiceHandler is an implementation of the proto.v1.EchoService service.
type EchoServiceHandler interface {
	// Unary
	EchoUnary(context.Context, *connect.Request[v1.EchoUnaryRequest]) (*connect.Response[v1.EchoUnaryResponse], error)
	// Server streaming
	EchoServerStream(context.Context, *connect.Request[v1.EchoServerStreamRequest], *connect.ServerStream[v1.EchoServerStreamResponse]) error
	// Client streaming
	EchoClientStream(context.Context, *connect.ClientStream[v1.EchoClientStreamRequest]) (*connect.Response[v1.EchoClientStreamResponse], error)
	// Bidirectional streaming
	EchoBidirectional(context.Context, *connect.BidiStream[v1.EchoBidirectionalRequest, v1.EchoBidirectionalResponse]) error
}

// NewEchoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEchoServiceHandler(svc EchoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	echoServiceMethods := v1.File_proto_v1_service_proto.Services().ByName("EchoService").Methods()
	echoServiceEchoUnaryHandler := connect.NewUnaryHandler(
		EchoServiceEchoUnaryProcedure,
		svc.EchoUnary,
		connect.WithSchema(echoServiceMethods.ByName("EchoUnary")),
		connect.WithHandlerOptions(opts...),
	)
	echoServiceEchoServerStreamHandler := connect.NewServerStreamHandler(
		EchoServiceEchoServerStreamProcedure,
		svc.EchoServerStream,
		connect.WithSchema(echoServiceMethods.ByName("EchoServerStream")),
		connect.WithHandlerOptions(opts...),
	)
	echoServiceEchoClientStreamHandler := connect.NewClientStreamHandler(
		EchoServiceEchoClientStreamProcedure,
		svc.EchoClientStream,
		connect.WithSchema(echoServiceMethods.ByName("EchoClientStream")),
		connect.WithHandlerOptions(opts...),
	)
	echoServiceEchoBidirectionalHandler := connect.NewBidiStreamHandler(
		EchoServiceEchoBidirectionalProcedure,
		svc.EchoBidirectional,
		connect.WithSchema(echoServiceMethods.ByName("EchoBidirectional")),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.v1.EchoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EchoServiceEchoUnaryProcedure:
			echoServiceEchoUnaryHandler.ServeHTTP(w, r)
		case EchoServiceEchoServerStreamProcedure:
			echoServiceEchoServerStreamHandler.ServeHTTP(w, r)
		case EchoServiceEchoClientStreamProcedure:
			echoServiceEchoClientStreamHandler.ServeHTTP(w, r)
		case EchoServiceEchoBidirectionalProcedure:
			echoServiceEchoBidirectionalHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEchoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEchoServiceHandler struct{}

func (UnimplementedEchoServiceHandler) EchoUnary(context.Context, *connect.Request[v1.EchoUnaryRequest]) (*connect.Response[v1.EchoUnaryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.EchoService.EchoUnary is not implemented"))
}

func (UnimplementedEchoServiceHandler) EchoServerStream(context.Context, *connect.Request[v1.EchoServerStreamRequest], *connect.ServerStream[v1.EchoServerStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.EchoService.EchoServerStream is not implemented"))
}

func (UnimplementedEchoServiceHandler) EchoClientStream(context.Context, *connect.ClientStream[v1.EchoClientStreamRequest]) (*connect.Response[v1.EchoClientStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.EchoService.EchoClientStream is not implemented"))
}

func (UnimplementedEchoServiceHandler) EchoBidirectional(context.Context, *connect.BidiStream[v1.EchoBidirectionalRequest, v1.EchoBidirectionalResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.v1.EchoService.EchoBidirectional is not implemented"))
}
